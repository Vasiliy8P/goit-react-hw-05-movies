{"version":3,"file":"static/js/245.b25aeb23.chunk.js","mappings":"8SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,oGACNF,EAAAA,EAAAA,IAAA,qCAAwCC,IADlC,cACvBE,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,qDAKjBC,EAAY,mCAAG,WAAOC,GAAP,uFACDN,EAAAA,EAAAA,IAAA,gBAAmBM,EAAnB,oBAAiCL,EAAjC,oBADC,cAClBE,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZG,EAAqB,mCAAG,WAAOC,GAAP,uFACVR,EAAAA,EAAAA,IAAA,+BACKC,EADL,iCACqCO,EADrC,gCADU,cAC3BL,EAD2B,yBAG1BA,EAASC,MAHiB,2CAAH,sDAMrBK,EAAY,mCAAG,WAAOH,GAAP,uFACDN,EAAAA,EAAAA,IAAA,gBACVM,EADU,4BACYL,EADZ,oBADC,cAClBE,EADkB,yBAGjBA,EAASC,MAHQ,2CAAH,sDAMZM,EAAU,mCAAG,WAAOJ,GAAP,uFACCN,EAAAA,EAAAA,IAAA,gBACVM,EADU,4BACYL,EADZ,2BADD,cAChBE,EADgB,yBAGfA,EAASC,MAHM,2CAAH,qD,6ICiCvB,EAtDqB,WAAO,IAAD,IACvB,GAAwCO,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,WAE7CC,EAAAA,EAAAA,YAAU,YACNf,EAAAA,EAAAA,IAAaS,GACRO,MAAK,SAAAC,GACFT,EAAgBS,EACnB,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACnB,GAAE,CAACV,IAEJ,IAAQa,EAAqEf,EAArEe,MAAOC,EAA8DhB,EAA9DgB,aAAcC,EAAgDjB,EAAhDiB,YAAaC,EAAmClB,EAAnCkB,aAAcC,EAAqBnB,EAArBmB,SAAUC,EAAWpB,EAAXoB,OAElE,OACI,4BACI,+BACI,SAAC,MAAD,KACA,SAAC,KAAD,CAAMC,GAAIjB,EAAV,yBAEJ,iBAAKkB,UAAU,YAAf,WACI,gBAAKC,IAAKN,GAAW,yCAAsCA,GAAeO,IAAKT,EAAOU,MAAM,SAC5F,4BACI,0BAAKV,EAAL,KAAcC,GAAgBA,EAAaU,MAAM,EAAG,GAApD,QACA,wCAAgBR,GAAgBA,EAAaS,QAAQ,OACrD,sCACA,uBAAIR,KACJ,oCACA,eAAIG,UAAU,SAAd,SACKF,GAAWA,EAAOQ,KAAI,gBAAElC,EAAF,EAAEA,GAAImC,EAAN,EAAMA,KAAN,OACnB,wBAAcA,GAALnC,EADU,aAOnC,oDACA,2BACI,yBACI,SAAC,KAAD,CAAM2B,GAAG,OAAOf,MAAO,CAAEC,KAAMH,GAA/B,UAA+C,qCAEnD,yBACI,SAAC,KAAD,CAAMiB,GAAG,UAAUf,MAAO,CAAEC,KAAMH,GAAlC,UAAkD,2CAG1D,SAAC,EAAA0B,SAAD,CAAUC,UAAU,0BAAK,SAACC,EAAA,EAAD,MAAzB,UACI,SAAC,KAAD,QAIf,C","sources":["Services/Api.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '3123e8450e42b4706d786efbc6b96d51';\n\nexport const GetTrendingMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data;\n}\n\nexport const GetMovieById = async (id) => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n} \n\nexport const GetMovieBySearchQuery = async (searchQuery) => {\n    const response = await axios.get(\n        `search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`);\n    return response.data;\n} \n\nexport const GetMovieCast = async (id) => {\n    const response = await axios.get(\n        `movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport const GetReviews = async (id) => {\n    const response = await axios.get(\n        `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data;\n}\n","import { Suspense, useEffect, useState } from \"react\";\nimport { useParams, Link, Outlet, useLocation } from \"react-router-dom\";\nimport { FiArrowLeft } from \"react-icons/fi\";\nimport { GetMovieById } from \"../../Services/Api\";\nimport Loader from \"components/Loader\";\nimport \"./MovieDetails.css\";\n\nconst MovieDetails = () => {\n    const [movieDetails, setMovieDetails] = useState({});\n    const { movieId } = useParams();\n    const location = useLocation();\n    const backLinkHref = location.state?.from ?? \"/movies\";\n\n    useEffect(() => {\n        GetMovieById(movieId)\n            .then(movie => {\n                setMovieDetails(movie);\n            })\n            .catch(error => console.log(error))\n    }, [movieId]);\n\n    const { title, release_date, poster_path, vote_average, overview, genres } = movieDetails;\n\n    return (\n        <div>\n            <button>\n                <FiArrowLeft />\n                <Link to={backLinkHref}>Go back</Link>\n            </button>\n            <div className=\"CardMovie\">\n                <img src={poster_path && `https://image.tmdb.org/t/p/w500${poster_path}`} alt={title} width=\"250\" />\n                <div>\n                    <h1>{title} ({release_date && release_date.slice(0, 4)})</h1>\n                    <p>User score: {vote_average && vote_average.toFixed(1)}</p>\n                    <h2>Overview</h2>\n                    <p>{overview}</p>\n                    <h3>Genres</h3>\n                    <ul className=\"Genres\">\n                        {genres && (genres.map(({id, name}) =>\n                            <li key={id}>{name}</li>\n                        ))}\n                    </ul> \n                </div>\n            </div>           \n            \n            <p>Additional information:</p>\n            <ul>\n                <li>\n                    <Link to=\"cast\" state={{ from: backLinkHref }}><b>Cast</b></Link>\n                </li>\n                <li>\n                    <Link to=\"reviews\" state={{ from: backLinkHref }}><b>Reviews</b></Link>\n                </li>\n            </ul>\n            <Suspense fallback={<div><Loader /></div>}>\n                <Outlet />\n            </Suspense>            \n        </div>\n    )\n}\n\nexport default MovieDetails;"],"names":["axios","API_KEY","GetTrendingMovies","response","data","GetMovieById","id","GetMovieBySearchQuery","searchQuery","GetMovieCast","GetReviews","useState","movieDetails","setMovieDetails","movieId","useParams","backLinkHref","useLocation","state","from","useEffect","then","movie","catch","error","console","log","title","release_date","poster_path","vote_average","overview","genres","to","className","src","alt","width","slice","toFixed","map","name","Suspense","fallback","Loader"],"sourceRoot":""}