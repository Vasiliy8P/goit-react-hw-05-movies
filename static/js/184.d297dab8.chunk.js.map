{"version":3,"file":"static/js/184.d297dab8.chunk.js","mappings":"8SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,oGACNF,EAAAA,EAAAA,IAAA,qCAAwCC,IADlC,cACvBE,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,qDAKjBC,EAAY,mCAAG,WAAOC,GAAP,uFACDN,EAAAA,EAAAA,IAAA,gBAAmBM,EAAnB,oBAAiCL,EAAjC,oBADC,cAClBE,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZG,EAAqB,mCAAG,WAAOC,GAAP,uFACVR,EAAAA,EAAAA,IAAA,+BACKC,EADL,iCACqCO,EADrC,gCADU,cAC3BL,EAD2B,yBAG1BA,EAASC,MAHiB,2CAAH,sDAMrBK,EAAY,mCAAG,WAAOH,GAAP,uFACDN,EAAAA,EAAAA,IAAA,gBACVM,EADU,4BACYL,EADZ,oBADC,cAClBE,EADkB,yBAGjBA,EAASC,MAHQ,2CAAH,sDAMZM,EAAU,mCAAG,WAAOJ,GAAP,uFACCN,EAAAA,EAAAA,IAAA,gBACVM,EADU,4BACYL,EADZ,2BADD,cAChBE,EADgB,yBAGfA,EAASC,MAHM,2CAAH,qD,oICiCvB,EAvDe,WAAO,IAAD,EACjB,GAAoDO,EAAAA,EAAAA,UAAS,IAA7D,eAAOC,EAAP,KAA2BC,EAA3B,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXV,EAAW,UAAGO,EAAaI,IAAI,gBAApB,QAAgC,IAEjDC,EAAAA,EAAAA,YAAU,WACc,KAAhBZ,IAIJD,EAAAA,EAAAA,IAAsBC,GACjBa,MAAK,SAAAC,GACFT,EAAsBS,EAAMC,QAC/B,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACnB,GAAE,CAACjB,IAQJ,OACI,4BACI,SAAC,KAAD,CACIoB,cAAe,CAAEC,MAAO,IACxBC,SAVS,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACtBC,EAA8B,KAAjBF,EAAOF,MAAe,CAAEK,MAAOH,EAAOF,OAAU,CAAC,EACpEb,EAAgBiB,GAChBD,GACH,EAIO,UAII,UAAC,KAAD,CAAMG,UAAU,aAAhB,WACI,SAAC,KAAD,CACIC,KAAK,QAELC,KAAK,OAELC,WAAS,EACTC,YAAY,mBAEhB,mBAAQF,KAAK,SAASF,UAAU,oBAAhC,0BAKR,wBACKvB,EAAmB4B,KAAI,gBAAGlC,EAAH,EAAGA,GAAImC,EAAP,EAAOA,MAAP,OACpB,yBACI,SAAC,KAAD,CAAMC,GAAE,kBAAapC,GAAMqC,MAAO,CAAEC,KAAM3B,GAA1C,SAAuDwB,KADlDnC,EADW,QAQvC,C","sources":["Services/Api.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '3123e8450e42b4706d786efbc6b96d51';\n\nexport const GetTrendingMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data;\n}\n\nexport const GetMovieById = async (id) => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n} \n\nexport const GetMovieBySearchQuery = async (searchQuery) => {\n    const response = await axios.get(\n        `search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`);\n    return response.data;\n} \n\nexport const GetMovieCast = async (id) => {\n    const response = await axios.get(\n        `movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport const GetReviews = async (id) => {\n    const response = await axios.get(\n        `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data;\n}\n","import { useEffect, useState } from \"react\";\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport { Formik, Form, Field } from 'formik';\nimport { GetMovieBySearchQuery } from '../../Services/Api';\n\n\nconst Movies = () => {\n    const [movieBySearchQuery, setMovieBySearchQuery] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const location = useLocation();\n    const searchQuery = searchParams.get(\"query\") ?? \"\";\n\n    useEffect(() => {\n        if (searchQuery === \"\") {\n            return\n        }\n\n        GetMovieBySearchQuery(searchQuery)\n            .then(movie => {\n                setMovieBySearchQuery(movie.results)\n            })\n            .catch(error => console.log(error));\n    }, [searchQuery]);\n\n    const handleSubmit = (values, { resetForm }) => {\n        const nextParams = values.value !== \"\" ? { query: values.value } : {};\n        setSearchParams(nextParams);\n        resetForm();\n    }    \n\n    return (\n        <div>\n            <Formik\n                initialValues={{ value: '' }}\n                onSubmit={handleSubmit}\n            >\n                <Form className=\"SearchForm\">                    \n                    <Field\n                        name=\"value\"\n                        // className=\"SearchForm-input\"\n                        type=\"text\"\n                        // autoComplete=\"off\"\n                        autoFocus\n                        placeholder=\"Search movies\"\n                    />\n                    <button type=\"submit\" className=\"SearchForm-button\">\n                        Search\n                    </button>\n                </Form>\n            </Formik>\n            <ul>\n                {movieBySearchQuery.map(({ id, title }) => (\n                    <li key={id}>\n                        <Link to={`/movies/${id}`} state={{ from: location }}>{title}</Link>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default Movies;"],"names":["axios","API_KEY","GetTrendingMovies","response","data","GetMovieById","id","GetMovieBySearchQuery","searchQuery","GetMovieCast","GetReviews","useState","movieBySearchQuery","setMovieBySearchQuery","useSearchParams","searchParams","setSearchParams","location","useLocation","get","useEffect","then","movie","results","catch","error","console","log","initialValues","value","onSubmit","values","resetForm","nextParams","query","className","name","type","autoFocus","placeholder","map","title","to","state","from"],"sourceRoot":""}