{"version":3,"file":"static/js/122.4213532e.chunk.js","mappings":"8SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,oGACNF,EAAAA,EAAAA,IAAA,qCAAwCC,IADlC,cACvBE,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,qDAKjBC,EAAY,mCAAG,WAAOC,GAAP,uFACDN,EAAAA,EAAAA,IAAA,gBAAmBM,EAAnB,oBAAiCL,EAAjC,oBADC,cAClBE,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,sDAKZG,EAAqB,mCAAG,WAAOC,GAAP,uFACVR,EAAAA,EAAAA,IAAA,+BACKC,EADL,iCACqCO,EADrC,gCADU,cAC3BL,EAD2B,yBAG1BA,EAASC,MAHiB,2CAAH,sDAMrBK,EAAY,mCAAG,WAAOH,GAAP,uFACDN,EAAAA,EAAAA,IAAA,gBACVM,EADU,4BACYL,EADZ,oBADC,cAClBE,EADkB,yBAGjBA,EAASC,MAHQ,2CAAH,sDAMZM,EAAU,mCAAG,WAAOJ,GAAP,uFACCN,EAAAA,EAAAA,IAAA,gBACVM,EADU,4BACYL,EADZ,2BADD,cAChBE,EADgB,yBAGfA,EAASC,MAHM,2CAAH,qD,4HCuBvB,EA9CgB,WACZ,OAAwCO,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaR,OAXAE,EAAAA,EAAAA,YAAU,WACNH,EAAU,YAEVL,EAAAA,EAAAA,IAAWM,GACNG,MAAK,SAAAC,GACFP,EAAgBO,EAAOC,SACvBN,EAAU,WACb,IACAO,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACnB,GAAE,CAACP,IAEU,YAAXF,GACQ,SAACY,EAAA,EAAD,IACwB,IAAxBd,EAAae,QACZ,sEAIR,wBACKf,EAAagB,KAAI,SAAAR,GAAM,OACpB,qCACaA,EAAOS,QAChB,uBAAIT,EAAOU,YAFNV,EAAOd,GADI,KAoBnC,C","sources":["Services/Api.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '3123e8450e42b4706d786efbc6b96d51';\n\nexport const GetTrendingMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data;\n}\n\nexport const GetMovieById = async (id) => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n} \n\nexport const GetMovieBySearchQuery = async (searchQuery) => {\n    const response = await axios.get(\n        `search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`);\n    return response.data;\n} \n\nexport const GetMovieCast = async (id) => {\n    const response = await axios.get(\n        `movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data;\n}\n\nexport const GetReviews = async (id) => {\n    const response = await axios.get(\n        `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data;\n}\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { GetReviews } from \"../../Services/Api\";\nimport Loader from \"components/Loader\";\n\nconst Reviews = () => {\n    const [reviewsMovie, setReviewsMovie] = useState([]);\n    const [status, setStatus] = useState('idle')\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        setStatus('panding')\n\n        GetReviews(movieId)\n            .then(review => {                \n                setReviewsMovie(review.results);\n                setStatus('resolved');\n            })\n            .catch(error => console.log(error));\n    }, [movieId]);\n\n    if(status === 'panding') {\n        return <Loader />\n    } else if (reviewsMovie.length === 0) {\n        return (<p>We don't have any reviews for this movie.</p>)\n    }\n\n    return (\n        <ul>\n            {reviewsMovie.map(review => (\n                <li key={review.id}>\n                    Author: {review.author}\n                    <p>{review.content}</p>\n                </li>\n            ))}\n        </ul>\n    );\n         \n            // {reviewsMovie.length !== 0\n            //     ? (<ul>\n            //         {reviewsMovie.map(review => (\n            //             <li key={review.id}>\n            //                 Author: {review.author}\n            //                 <p>{review.content}</p>\n            //             </li>\n            //         ))}\n            //     </ul>)\n            //     : <p>We don't have any reviews for this movie.</p>\n            // }\n}\n\nexport default Reviews;"],"names":["axios","API_KEY","GetTrendingMovies","response","data","GetMovieById","id","GetMovieBySearchQuery","searchQuery","GetMovieCast","GetReviews","useState","reviewsMovie","setReviewsMovie","status","setStatus","movieId","useParams","useEffect","then","review","results","catch","error","console","log","Loader","length","map","author","content"],"sourceRoot":""}